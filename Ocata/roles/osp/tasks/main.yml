---
   #- name: Pause the execution of OpenStack installation!
    # pause: prompt='Please confirm you want to start OpenStack installation! Press Enter to continue. Press Ctrl+c and then "a" to abort'


## Install OpenStack packages
   - name: Install OpenStack packages "Packstack".
     yum: name={{ item }} state=latest
     with_items:
      - openstack-packstack
      - openvswitch
     when: inventory_hostname == "{{ controller }}"

   - name: Prepare OSP Controller node.
     shell: ssh-keygen -q -N "" -f /root/.ssh/id_rsa ;sshpass -p "@dmin123" ssh-copy-id -o StrictHostKeyChecking=no {{ item }}
     with_items:
     - "{{ controller }}"
     - "{{ compute }}"
     #- {{ another_compute_if_require}}
     when: inventory_hostname == "{{ controller }}"


## Create bridges br-ex
   - name: Update  eth0 file.
     blockinfile:
       dest: "{{ net_path }}/ifcfg-{{ device_name }}"
       #regexp: '^osd'
       block: |
         DEVICE="{{ device_name }}"
         ONBOOT=yes
         TYPE=OVSPort
         DEVICETYPE=ovs
         OVS_BRIDGE=br-ex

       #marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.name }}"
     become: yes
     become_user: "root"
     become_method: sudo
     when: inventory_hostname == "{{ controller }}"

   - name: Create  br-ex file.
     command: touch "{{ net_path }}/ifcfg-br-ex"
     become: yes
     become_user: "root"
     become_method: sudo
     args:
       creates: "{{ net_path }}/ifcfg-br-ex"
     when: inventory_hostname == "{{ controller }}"

   - name: Update  br-ex file.
     blockinfile:
       dest: "{{ net_path }}/ifcfg-br-ex"
       #regexp: '^osd'
       block: |
        DEVICE=br-ex
        DEVICETYPE=ovs
        TYPE=OVSBridge
        BOOTPROTO=static
        IPADDR={{ control_ip }}
        NETMASK=255.255.255.0
        GATEWAY=192.168.2.1

       #marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.name }}"
     become: yes
     become_user: "root"
     become_method: sudo
     register: status
     when: inventory_hostname == "{{ controller }}"

   - name: restart network service
     service: name=network state=restarted enabled=yes
     when: status.changed
     #when: inventory_hostname == "{{ controller }}"

   - name: Generate openstack answer file.
     command: packstack --gen-answer-file /root/answers.txt
     when: inventory_hostname == "{{ controller }}"

## update answer.txt file
   - name: Update answer file.
     shell: "{{ item }}"
     with_items:
      - sed -i -e "s/192.168.121.*/"{{ controller }}"/" "{{ answer }}"
      - sed -i -e "s/CONFIG_DEFAULT_PASSWORD=.*/CONFIG_DEFAULT_PASSWORD="{{ default_password }}"/" "{{ answer }}"
      - sed -i -e "s/CONFIG_COMPUTE_HOSTS=.*/CONFIG_COMPUTE_HOSTS="{{ compute }}"/" "{{ answer }}"
      - sed -i -e "s/CONFIG_LBAAS_INSTALL=.*/CONFIG_LBAAS_INSTALL=y/" "{{ answer }}"
      - sed -i -e "s/CONFIG_PROVISION_DEMO=.*/CONFIG_PROVISION_DEMO=n/" "{{ answer }}"
      - sed -i -e "s/CONFIG_KEYSTONE_ADMIN_PW=.*/CONFIG_KEYSTONE_ADMIN_PW="{{ default_password }}"/" "{{ answer }}"
      - sed -i -e "s/CONFIG_CONTROLLER_HOST=.*/CONFIG_CONTROLLER_HOST="{{ controller }}"/" "{{ answer }}"
      - sed -i -e "s/CONFIG_NETWORK_HOSTS=.*/CONFIG_NETWORK_HOSTS="{{ controller }}"/" "{{ answer }}"
      - sed -i -e "s/CONFIG_NEUTRON_ML2_VXLAN_GROUP=.*/CONFIG_NEUTRON_ML2_VXLAN_GROUP=239.1.1.2/" "{{ answer }}"
      - sed -i -e "s/CONFIG_HEAT_CFN_INSTALL=.*/CONFIG_HEAT_CFN_INSTALL=y/" "{{ answer }}"
      - sed -i -e "s/CONFIG_CINDER_VOLUMES_CREATE=.*/CONFIG_CINDER_VOLUMES_CREATE=y/" "{{ answer }}"
      - sed -i -e "s/CONFIG_SWIFT_INSTALL=.*/CONFIG_SWIFT_INSTALL=n/" "{{ answer }}"
      - sed -i -e "s/CONFIG_NEUTRON_ML2_VNI_RANGES=.*/CONFIG_NEUTRON_ML2_VNI_RANGES=1001:2000/" "{{ answer }}"
        # Neutron
      - sed -i -e "s/CONFIG_NEUTRON_FWAAS=.*/CONFIG_NEUTRON_FWAAS=y/" "{{ answer }}"
      - sed -i -e "s/CONFIG_NEUTRON_METERING_AGENT_INSTALL=.*/CONFIG_NEUTRON_METERING_AGENT_INSTALL=y/" "{{ answer }}"
        # VXLAN Configuration
      - sed -i -e "s/CONFIG_NEUTRON_ML2_TYPE_DRIVERS=.*/CONFIG_NEUTRON_ML2_TYPE_DRIVERS=vxlan/" "{{ answer }}"
      - sed -i -e "s/CONFIG_NEUTRON_ML2_TENANT_NETWORK_TYPES=.*/CONFIG_NEUTRON_ML2_TENANT_NETWORK_TYPES=vxlan/" "{{ answer }}"
      - sed -i -e "s/CONFIG_NEUTRON_OVS_TUNNEL_IF=.*/CONFIG_NEUTRON_OVS_TUNNEL_IF="{{ priv_device }}"/" "{{ answer }}"
      - sed -i -e "s/CONFIG_NEUTRON_OVS_BRIDGE_MAPPINGS=.*/CONFIG_NEUTRON_OVS_BRIDGE_MAPPINGS=physnet1:br-ex/" "{{ answer }}"
     when: inventory_hostname == "{{ controller }}"

   - name: Install openstack using packstack.
     shell: packstack --answer-file  "{{ answer }}"
     args:
       creates: /root/keystonerc_admin
     register: install
     async: 1800
     poll: 5
     when: inventory_hostname == "{{ controller }}"
   - debug: var=install.stdout_lines

## Add sample networks and subnets. security groups for testing purposes.
   - name: Creating networks,security group,keys ...
     shell: "{{ item }}"
     with_items:
#     - source /root/keystonerc_admin;neutron net-create int; neutron subnet-create --name subint int 192.168.1.0/24 --allocation-pool start=192.168.1.100,end=192.168.1.200
#     - source /root/keystonerc_admin;neutron net-create ext; neutron subnet-create --allocation-pool start=192.168.2.100,end=192.168.2.199 --gateway 192.168.2.1 --disable-dhcp --name subext ext 192.168.2.0/24
#     - source /root/keystonerc_admin;neutron router-create router1; neutron net-update ext --router:external=True; neutron router-gateway-set router1 ext; neutron router-interface-add router1 subint
#     - source /root/keystonerc_admin;nova floating-ip-create ext; nova floating-ip-create ext
#     - source /root/keystonerc_admin;nova secgroup-create sec1 "SSH and Web"; nova secgroup-add-rule sec1 tcp 22 22 0.0.0.0/0; nova secgroup-add-rule sec1 tcp 443 443 0.0.0.0/0; nova secgroup-add-rule sec1 icmp -1 -1 0.0.0.0/0; nova secgroup-add-group-rule sec1 sec1 tcp 80 80
#     - source /root/keystonerc_admin;nova keypair-add key1 > /root/key1.pem; chmod 0600 /root/key1.pem
     ## Downloading images
     - curl -k -o /root/small.img  http://192.168.2.1/content/images/small.img &>/dev/null
     - curl -k -o /root/web.img http://192.168.2.1/content/images/web.img &>/dev/null
     - curl -k -o /root/cirros.img http://192.168.2.1/content/images/cirros.img &>/dev/null
#     args:
#       creates: /root/key1.pem
     when: inventory_hostname == "{{ controller }}"


##


